# Compare with the standard normal distribution
curve(dnorm(x,0,1), 0, 10, col="red", add=T)
?scale
?dnorm
standard_deviation_theory <- (1/lambda)/sqrt(num_sample)
standard_deviation_theory
curve(dnorm(x,5,0.8), -3, 3, col="red", add=T)
?dnorm
?curve
x
curve(dnorm(x,5,0.8), 0, 8, col="red", add=T)
# Plot the distribution of the 1000 simulations
# sexpscale <- scale(simulated_exponentials)
hist(simulated_exponentials,probability=T, ylim=c(0, 0.5), xlab = "Means",main="Fig 1: Density of 1000 simulations",ylab="Density")
lines(density(simulated_exponentials), col="green")
# Compare with the standard normal distribution
curve(dnorm(x,5,0.8), -3, 3, col="red", add=T)
hist(simulated_exponentials,probability=T, ylim=c(0, 0.5), xlab = "Means",main="Fig 1: Density of 1000 simulations",ylab="Density")
lines(density(simulated_exponentials), col="green")
# Compare with the standard normal distribution
curve(dnorm(x,0,1), -3, 3, col="red", add=T)
hist(exponentials_means,probability=T, ylim=c(0, 0.5),xlab = "Means",main="Fig 2: Density of 1000 simulation of 40 mean",ylab="Density")
lines(density(exponentials_means), col="blue")
# Compare with the standard normal distribution
curve(dnorm(x,5,0.79), 0, 8, col="red", add=T)
# Plot the distribution of the 1000 simulations
hist(simulated_exponentials,probability=T, ylim=c(0, 0.5), xlab = "Means",main="Fig 1: Density of 1000 simulations",ylab="Density")
lines(density(simulated_exponentials), col="green")
hist(simulated_exponentials,probability=T, ylim=c(0, 0.2), xlab = "Means",main="Fig 1: Density of 1000 simulations",ylab="Density")
lines(density(simulated_exponentials), col="green")
hist(exponentials_means,probability=T, ylim=c(0, 0.5),xlab = "Means",main="Fig 2: Density of 1000 simulation of 40 mean",ylab="Density")
lines(density(exponentials_means), col="blue")
# Compare with the standard normal distribution
curve(dnorm(x,5,0.79), 0, 8, col="red", add=T)
# set seed for reproducibility
set.seed(54321)
# set lambda to 0.2
lambda <- 0.2
# 40 samples
num_sample <- 40
# 1000 simulations
num_simulations <- 1000
# generate 1000 simulation
simulated_exponentials <- replicate(num_simulations, rexp(num_sample, lambda))
# calculate mean of 40 exponentials
exponentials_means <- apply(simulated_exponentials, 2, mean)
#  mean of distribution of averages of 40 exponentials
sample_mean <- mean(exponentials_means)
sample_mean
# mean from theoretical expression
theory_mean <- 1/lambda
theory_mean
# Histogram of sample_mean vs theoretical mean
hist(exponentials_means, xlab = "mean", main = "Exponential Function Simulations")
abline(v = sample_mean, col = "blue")
abline(v = theory_mean, col = "red")
# standard deviation of distribution
standard_deviation_dist <- sd(exponentials_means)
standard_deviation_dist
# standard deviation from theoretical expression
standard_deviation_theory <- (1/lambda)/sqrt(num_sample)
standard_deviation_theory
# variance of distribution
variance_dist <- standard_deviation_dist^2
variance_dist
# variance from theoretical expression
variance_theory <- ((1/lambda)*(1/sqrt(num_sample)))^2
variance_theory
# Plot the distribution of the 1000 simulations
hist(simulated_exponentials, probability=T, ylim=c(0, 0.2), xlab = "Means", main="Fig 1: Density of 1000 simulations", ylab="Density")
lines(density(simulated_exponentials), col="green")
hist(exponentials_means, probability=T, ylim=c(0, 0.5), xlab = "Means", main="Fig 2: Density of 1000 simulation of 40 mean", ylab="Density")
lines(density(exponentials_means), col="blue")
# Compare with the standard normal distribution
curve(dnorm(x,5,0.79), 0, 8, col="red", add=T)
# Plot the distribution of the sample simulation of 40 mean exponentials
hist(exponentials_means, probability=T, ylim=c(0, 0.6), xlab = "Means", main="Fig 2: Density of 1000 simulation of 40 mean", ylab="Density")
lines(density(exponentials_means), col="blue")
# Compare with the standard normal distribution
curve(dnorm(x,5,0.79), 0, 8, col="red", add=T)
qqnorm(exponentials_means)
qqline(exponentials_means, col = 2)
qqnorm(simulated_exponentials)
qqline(simulated_exponentials, col = 2)
hist(simulated_exponentials, breaks = 100, xlim = range(0, 30), main = "Exponential Function", xlab = "Exponential Function - lambda = .2")
lines(density(simulated_exponentials), col="green")
lines(dsimulated_exponentials, col="green")
lines(simulated_exponentials, col="green")
# Plot the distribution of the 1000 simulations
hist(simulated_exponentials, breaks = 100, xlim = range(0, 30), main = "Exponential Function", xlab = "Exponential Function - lambda = .2")
# hist(simulated_exponentials, probability=T, ylim=c(0, 0.2), xlab = "Means", main="Fig 1: Density of 1000 simulations of 40 exponentials", ylab="Density")
lines(density(simulated_exponentials), col="green")
abline(v = simulated_exponentials, col = "blue")
lines(density(simulated_exponentials), col="green")
hist(simulated_exponentials, breaks = 100, xlim = range(0, 30), main = "Exponential Function", xlab = "Exponential Function - lambda = .2")
lines(density(simulated_exponentials), col="green")
data(ToothGrowth)
str(ToothGrowth)
boxplot(len ~ supp * dose,ToothGrowth, col="blue", ylab="Length", xlab="Supplement type & Dose",main="Boxplots by supplement type and dow")
ggplot(aes(x = supp, y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = supp))
ggplot(aes(x = supp, y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = blue))
ggplot(aes(x = supp, y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = blue))ΩΩΩ
ggplot(aes(x = supp, y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = "blue"))
ggplot(aes(x = supp, y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = supp))
ggplot(aes(x = supp, y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = conc))
ggplot(aes(x = supp, y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = cond))
ggplot(aes(x = supp, y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = supp, col="grey"))
ggplot(aes(x = factor(dose), y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = factor(dose)))
ggplot(aes(x = supp, y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = supp), colour="blue")
ggplot(aes(x = supp, y = len), data = ToothGrowth, colour="blue") +
geom_boxplot(aes(fill = supp))
ggplot(aes(x = factor(dose), y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = factor(dose)))
ggplot(aes(x = supp, y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = supp)) + facet_wrap(~ dose)
ggplot(aes(x = supp, y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = supp)) + facet_wrap(~ dose) +
ggtitle("Tooth length in relation to dose by supp")
ggplot(aes(x = supp, y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = supp)) +
ggtitle("Tooth length in relation to supplement")
ggplot(aes(x = factor(dose), y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = factor(dose))) +
ggtitle("Tooth length in relation to doses")
summary(ToothGrowth)
summary(ToothGrowth[ToothGrowth$supp=="OJ",])
summary(ToothGrowth[ToothGrowth$supp=="VC",])
t.test(len ~supp,ToothGrowth[ToothGrowth$dose==0.5,],paired=FALSE, var.equal=TRUE)
t.test(len~dose, ToothGrowth, dose %in% c(2.0,1.0), paired = F, var.equal = T, alternative ="two.sided")
t.test(len ~supp,ToothGrowth[ToothGrowth$dose==0.5,],paired=FALSE, var.equal=TRUE)
t.test(len ~supp,ToothGrowth[ToothGrowth$dose==1,],paired=FALSE, var.equal=TRUE)
t.test(len ~supp,ToothGrowth[ToothGrowth$dose==2,],paired=FALSE, var.equal=TRUE)
t.test(len ~ supp, data = ToothGrowth)
t.test(len ~supp,ToothGrowth[ToothGrowth$dose==0.5,],paired=FALSE, var.equal=TRUE)
# When dose equals 0.5
t.test(len ~supp,ToothGrowth[ToothGrowth$dose==0.5,],paired=FALSE, var.equal=TRUE)
# When dose equals 1.0
t.test(len ~supp,ToothGrowth[ToothGrowth$dose==1,],paired=FALSE, var.equal=TRUE)
# When dose equals 2.0
t.test(len ~supp,ToothGrowth[ToothGrowth$dose==2,],paired=FALSE, var.equal=TRUE)
```{r}
t.test(len~dose, ToothGrowth, dose %in% c(1.0,0.5), paired = F, var.equal = T, alternative ="two.sided")
```
### Compare dose 1.0 vs dose 2.0
```{r}
t.test(len~dose, ToothGrowth, dose %in% c(2.0,1.0), paired = F, var.equal = T, alternative ="two.sided")
```
t.test(len~dose, ToothGrowth, dose %in% c(0.5,1.0), paired = F, var.equal = T, alternative ="two.sided")
t.test(len ~supp,ToothGrowth[ToothGrowth$dose==0.5,],paired=FALSE, var.equal=TRUE)
# Check effect of supplement when dose equals 0.5
t.test(len ~supp,ToothGrowth[ToothGrowth$dose==0.5,],paired=FALSE, var.equal=TRUE)
# Check effect of supplement when dose equals 1.0
t.test(len ~supp,ToothGrowth[ToothGrowth$dose==1,],paired=FALSE, var.equal=TRUE)
# Check effect of supplement when dose equals 2.0
t.test(len ~supp,ToothGrowth[ToothGrowth$dose==2,],paired=FALSE, var.equal=TRUE)
str(ToothGrowth)
library(swirl)
swirl()
0.64
.64
mypdf
mypdf(1.6)
integrate(mfpdf,0,1.6)
integrate(mypdf,0,1.6)
0.64
2
1
1.41
info()
4
2
1
1.414214
.997*.001
(1-.985)*(1-.001)
.000997/(.000997+.014985)
1/6
3.5
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
3.5
expect_dice
integrate(myfunc,0,2)
spop
mean(spop)
allsam
apply(allsam,1,mean)
mean(smeans)
dice_sqr
ex2_fair <- sum(dice_fair * dice_sqr)
ex2_fair-3.5^2
sum(dice_high * dice_sqr)-edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
equiv_val(0.94208)
0.94208
pbinom(2,size=5,prob=.8,lower.tail=FALSE)
qnorm(.10)
0
qnorm(.975,mean=3,sd=2)
6.92
pnorm(1200,mean=1020,sd=50,lower.tail=FALSE)
pnorm((1200-1020)/50,lower.tail=FALSE)
qnorm(.75,mean=1020,sd=50)
.53
.53
ppois(3,2.5 * 4)
ppois(5,1000*.01)
pbinom(5,1000,.01)
ppois(5,1000*.01)
coinPlot(10)
coinPlot(100)
coinPlot(10000)
qnorm(.95)
6 + c(-1,1)*qnorm(.975)*sqrt(.6*.4/100)
.6 + c(-1,1)*qnorm(.975)*sqrt(.6*.4/100)
binom.test(60,100)$conf.int
mywald(.2)
ACcompar(20)
ACCompar(20)
lamb <- 5/94.32
lamb +c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(5,94.32)$conf
myplot(2)
myplot(20)
myplot2(2)
qt(.975,2)
myplot2(20)
sleep
range(g1)
range(g2)
difference <- g2-g1
mean(difference)
s <- sd(difference)
mn + c(-1,1)*qt(.975,9)*s/sqrt(10)
t.test(difference)$conf.int
sp <- 7*15.34^2 + 20*18.23^2
ns <- 8+21-2
sp <- sqrt(sp/ns)
132.86-127.44+c(-1,1)*qt(.975,ns)*sp*sqrt(1/8+1/21)
sp <- sqrt((9*var(g1)+9*var(g2))/18)
md + c(-1,1)*qt(.975,18)*sp*sqrt(1/5)
t.test(g2,g1,paired=FALSE,var.equal=TRUE)$conf
t.test(g2,g1,paired=TRUE)$conf
num <- (15.34^2/8 + 18.23^2/21)^2
den <- 15.34^4/8^2/7 + 18.23^4/21^2/20
mydf <- num/den
132.86-127.44 +c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8 + 18.23^2/21)
1
2
.8
15
qt(.95,15)
dim(fs)
t.test(fs$sheight-fs$fheight)
11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
8
pt(2.5, 15, lower.tail=FALSE)
qnorm(.95)
qnorm(.99)
pnorm(2)
pnorm(2,lower.tail=FALSE)
mybin
pbinom(6,size=8,prob=.5,lower.tail=FALSE)
pbinom(7,size=8,prob=.5,lower.tail=TRUE)
ppois(9,5,lower.tail=FALSE)
myplot(32)
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z <- qnorm(.95)
pnorm(30+z,mean=30,lower.tail=FALSE)
pnorm(30+z,mean=32,lower.tail=FALSE)
pnorm(30+z,mean=32,sd=1,lower.tail=FALSE)
pnorm(30+z*2,mean=32,sd=2,lower.tail=FALSE)
power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample",  alt = "one.sided")$power
power.t.test(n = 16, delta = 2 , sd=4, type = "one.sample",  alt = "one.sided")$power
power.t.test(n = 16, delta = 100 , sd=200, type = "one.sample",  alt = "one.sided")$power
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample",  alt = "one.sided")$n
power.t.test(power = .8, delta = 2, sd=4, type = "one.sample",  alt = "one.sided")$n
power.t.test(power = .8, delta = 100 , sd=200, type = "one.sample",  alt = "one.sided")$n
power.t.test(power = .8, n=26, sd=1, type = "one.sample",  alt = "one.sided")$delta
power.t.test(power = .8, n=27, sd=1, type = "one.sample",  alt = "one.sided")$delta
head(pValues)
sum(pValues < 0.05)
sum(p.adjust(pValues,method="bonferroni") < 0.05)
sum(p.adjust(pValues,method="BH") < 0.05)
tail(trueStatus)
table(pValues2 < 0.05, trueStatus)
"table(p.adjust(pValues2,method=\"BH\") < 0.05, trueStatus)"
24/500
"table(p.adjust(pValues2,method=\"bonferroni\") < 0.05, trueStatus)"
table(p.adjust(pValues2,method=\"bonferroni\") < 0.05, trueStatus)
table(p.adjust(pValues2,method=\"bonferroni\") < 0.05, trueStatus)
table(p.adjust(pValues2,method="bonferroni") < 0.05, trueStatus)
table(p.adjust(pValues2,method=\"BH\") < 0.05, trueStatus)
table(p.adjust(pValues2,method="BH") < 0.05, trueStatus)
3.5
print(g2)
head(sh)
nh
median(resampleMedians)
median(resampleMedians)
median(resampledMedians)
median(sh)
sam <- sample(fh,nh*B,replace=TRUE)
resam <- matrix(sam,B,nh)
meds <- apply(resam,1,median)
median(meds)-median(fh)
sd(meds)
sd(resampledMedians)
quantile(resampledMedians,c(.025,.975))
quantile(meds,c(.025,.975))
dim(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range(Cdata$count)
group
testSata
testStat
obs <- testStat(BCcounts,group)
BCcounts
obs <- testStat(BCcounts,group)
group
testStat
obs <- testStat(BCcounts,group)
obs
mean(Bdata$count)-mean(Cdata$count)
sample(group)
perms <- sapply(1 : 10000, function(i) testStat(BCcounts, sample(group)))
mean(perms>obs)
testStat(DEcounts,group)
perms <- sapply(1 : 10000, function(i) testStat(DEcounts, sample(group)))
library(swirl)
swirl()
install_from_swirl("Regression Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent,
| galton)
regrline <- lm(child ~ parent,galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
fit <- lm(child~parent,galton)
sum(fit)
summary(fit)
fit$residuals
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
f
lhs-rhs
all.equal(lhs,rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est(ols.slope,ols.ic))
all.equal(varChild,sum(varRes,varEst))
all.equal(varChild,varEst+varRes)
efit <- lm(accel ~ mag+dist, attenu)
mean(residuals)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
init_model <- lm(mpg ~ ., data = mtcars)
best_model <- step(init_model, direction = "both")
library(ggplot2)
ggplot(aes(x = mpg, y = am), data = mtcars) +
geom_boxplot(aes(fill = supp)) +
ggtitle("Fig 2. Miles per gallon by transmission type")
library(ggplot2)
ggplot(aes(x = mpg, y = am), data = mtcars) +
geom_boxplot(aes(fill = mpg)) +
ggtitle("Fig 2. Miles per gallon by transmission type")
library(ggplot2)
ggplot(aes(x = am, y = mpg), data = mtcars) +
geom_boxplot(aes(fill = am)) +
ggtitle("Fig 2. Miles per gallon by transmission type")
base_model <- lm(mpg ~ am, data = mtcars)
anova(base_model, best_model)
t.test(mpg ~ am, data = mtcars)
leverage <- hatvalues(best_model)
tail(sort(leverage),3)
influential <- dfbetas(best_model)
tail(sort(influential[,6]),3)
par(mfrow=c(2, 2))
plot(best_model)
init_model <- lm(mpg ~ ., data = mtcars)
best_model <- step(init_model, direction = "both")
summary(best_model)
base_model <- lm(mpg ~ am, data = mtcars)
anova(base_model, best_model)
full.model <- lm(mpg ~ ., data = mtcars)
best.model <- step(full.model, direction = "backward")
init_model <- lm(mpg ~ ., data = mtcars)
best_model <- step(init_model, direction = "both")
summary(best_model)
base_model <- lm(mpg ~ am, data = mtcars)
anova(base_model, best_model)
par(mfrow=c(2, 2))
plot(best_model)
par(mfrow=c(2, 2))
plot(best_model)
leverage <- hatvalues(best_model)
tail(sort(leverage),3)
influential <- dfbetas(best_model)
tail(sort(influential[,6]),3)
leverage <- hatvalues(best_model)
tail(sort(leverage),3)
influential <- dfbetas(best_model)
tail(sort(influential[,6]),3)
leverage <- hatvalues(best_model)
tail(sort(leverage),3)
influential <- dfbetas(best_model)
tail(sort(influential[,6]),3)
?step
pairs(mtcars)
boxplot(mpg ~ am, data = mtcars, ylab = "Miles Per Gallon", xlab = "Transmission Type",height=3, width=3)
boxplot(mpg ~ am, data = mtcars, ylab = "Miles Per Gallon", xlab = "Transmission Type",height=3, width=3)
boxplot(mpg ~ am, data = mtcars, ylab = "Miles Per Gallon", xlab = "Transmission Type")
boxplot(mpg ~ am, data = mtcars, ylab = "Miles Per Gallon", xlab = "Transmission Type",pars=list((boxwex=.8, staplewex=.6))
boxplot(mpg ~ am, data = mtcars, ylab = "Miles Per Gallon", xlab = "Transmission Type", pars=list(boxwex=.8, staplewex=.6))
boxplot(mpg ~ am, data = mtcars, ylab = "Miles Per Gallon", xlab = "Transmission Type", pars=list(boxwex=.4, staplewex=.3))
boxplot(mpg ~ am, data = mtcars, ylab = "Miles Per Gallon", xlab = "Transmission Type", pars=list(boxwex=.4, staplewex=.3), space=.1)
boxplot(mpg ~ am, data = mtcars, ylab = "Miles Per Gallon", xlab = "Transmission Type", pars=list(boxwex=.4, staplewex=.3), space=.05)
pairs(mpg ~ ., data = mtcars, main="Figure 1")
par(mfrow=c(2, 2))
pairs(mpg ~ ., data = mtcars, main="Figure 1")
boxplot(mpg ~ am, data = mtcars, ylab = "Miles Per Gallon", xlab = "Transmission Type", main="Figure 2")
setwd("~/Course8/Practical-Machine-Learning")
library(caret)
library(rpart)
library(rpart.plot)
library(randomForest)
library(corrplot)
install.packages("caret")
install.packages("rpart.plot")
install.packages("randomForest")
install.packages("corrplot")
library(caret)
library(rpart)
library(rpart.plot)
library(randomForest)
library(corrplot)
trainRaw <- read.csv("./data/pml-training.csv")
testRaw <- read.csv("./data/pml-testing.csv")
dim(trainRaw)
dim(testRaw)
trainRaw <- read.csv("./data/pml-training.csv")
testRaw <- read.csv("./data/pml-testing.csv")
dim(trainRaw)
dim(testRaw)
sum(complete.cases(trainRaw))
trainRaw <- trainRaw[, colSums(is.na(trainRaw)) == 0]
testRaw <- testRaw[, colSums(is.na(testRaw)) == 0]
classe <- trainRaw$classe
trainRemove <- grepl("^X|timestamp|window", names(trainRaw))
trainRaw <- trainRaw[, !trainRemove]
trainCleaned <- trainRaw[, sapply(trainRaw, is.numeric)]
trainCleaned$classe <- classe
testRemove <- grepl("^X|timestamp|window", names(testRaw))
testRaw <- testRaw[, !testRemove]
testCleaned <- testRaw[, sapply(testRaw, is.numeric)]
dim(trainCleaned)
dim(testCleaned)
set.seed(22519)
inTrain <- createDataPartition(trainCleaned$classe, p=0.60, list=F)
trainData <- trainCleaned[inTrain, ]
testData <- trainCleaned[-inTrain, ]
modFitA1 <- rpart(classe ~ ., data=trainData, method="class")
predictionsA1 <- predict(modFitA1, testData, type = "class")
rpart.plot(predictionA1, main="Classification Tree", extra=102, under=TRUE, faclen=0)
rpart.plot(predictionsA1, main="Classification Tree", extra=102, under=TRUE, faclen=0)
treeModel <- rpart(classe ~ ., data=trainData, method="class")
prp(treeModel)
rpart.plot(modFitA1, main="Classification Tree", extra=102, under=TRUE, faclen=0)
confusionMatrix(predictionsA1, testData$classe)
install.packages("e1071")
confusionMatrix(predictionsA1, testData$classe)
library(e1071)
modFitB1 <- randomForest(classe ~. , data=trainData)
predictionsB1 <- predict(modFitB1, testData, type = "class")
confusionMatrix(predictionsB1, testData$classe)
predictfinal <- predict(modFitB1, testCleaned[, -length(names(testCleaned))], type = "class")
predictfinal
library(caret)
library(rpart)
library(rpart.plot)
library(randomForest)
library(e1071)
modFitA1 <- rpart(classe ~ ., data=trainData, method="class")
